generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Party {
  id            String   @id @default(cuid())
  code          String   @unique
  hostId        String?
  status        String   @default("lobby")
  usedPromptIds Int[]    @default([])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  players       Player[]
  rounds        Round[]

  @@map("parties")
}

model Player {
  id           String       @id @default(cuid())
  partyId      String
  nickname     String
  avatar       String
  socketId     String?
  isHost       Boolean      @default(false)
  isActive     Boolean      @default(true)
  score        Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assignments  Assignment[]
  party        Party        @relation(fields: [partyId], references: [id], onDelete: Cascade)
  responses    Response[]
  roundsAsLiar Round[]      @relation("LiarRound")
  votesAgainst Vote[]       @relation("AccusedVote")
  votesCast    Vote[]       @relation("VoterVote")

  @@map("players")
}

model Round {
  id           String        @id @default(cuid())
  partyId      String
  number       Int
  liarPlayerId String?
  status       String        @default("lobby")
  stealth      Boolean       @default(false)
  startedAt    DateTime      @default(now())
  endedAt      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  assignments  Assignment[]
  responses    Response[]
  prompt       RoundPrompt?
  summary      RoundSummary?
  liar         Player?       @relation("LiarRound", fields: [liarPlayerId], references: [id])
  party        Party         @relation(fields: [partyId], references: [id], onDelete: Cascade)
  votes        Vote[]

  @@unique([partyId, number])
  @@map("rounds")
}

model Prompt {
  id           Int           @id @default(autoincrement())
  category     String
  textTrue     String
  textDecoy    String
  difficulty   Int           @default(1)
  enabled      Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  roundPrompts RoundPrompt[]

  @@map("prompts")
}

model RoundPrompt {
  id       String @id @default(cuid())
  roundId  String @unique
  promptId Int
  prompt   Prompt @relation(fields: [promptId], references: [id])
  round    Round  @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@map("round_prompts")
}

model Assignment {
  id            String   @id @default(cuid())
  roundId       String
  playerId      String
  role          String
  promptVariant String
  createdAt     DateTime @default(now())
  player        Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  round         Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@unique([roundId, playerId])
  @@map("assignments")
}

model Response {
  id        String   @id @default(cuid())
  roundId   String
  playerId  String
  text      String
  createdAt DateTime @default(now())
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  round     Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@unique([roundId, playerId])
  @@map("responses")
}

model Vote {
  id              String   @id @default(cuid())
  roundId         String
  voterId         String
  accusedPlayerId String?
  createdAt       DateTime @default(now())
  isNoLiarVote    Boolean  @default(false)
  accused         Player?  @relation("AccusedVote", fields: [accusedPlayerId], references: [id], onDelete: Cascade)
  round           Round    @relation(fields: [roundId], references: [id], onDelete: Cascade)
  voter           Player   @relation("VoterVote", fields: [voterId], references: [id], onDelete: Cascade)

  @@unique([roundId, voterId])
  @@map("votes")
}

model RoundSummary {
  id          String  @id @default(cuid())
  roundId     String  @unique
  liarCaught  Boolean
  winType     String
  scoresDelta Json?
  round       Round   @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@map("round_summaries")
}
